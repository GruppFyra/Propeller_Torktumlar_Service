// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnurrtumlareWebSite.Data;

namespace SnurrtumlareWebSite.Migrations.SnurrtumlareDb
{
    [DbContext(typeof(SnurrtumlareDbContext))]
    [Migration("20210410150741_InitialSnurrtumlareDbMigration")]
    partial class InitialSnurrtumlareDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SnurrtumlareWebSite.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalOrderCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 123456,
                            IsDelivered = false,
                            TotalOrderCost = 999m,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 234567,
                            IsDelivered = true,
                            TotalOrderCost = 4995m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.OrderRow", b =>
                {
                    b.Property<int>("OrderRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderRowId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderRow");

                    b.HasData(
                        new
                        {
                            OrderRowId = 12,
                            OrderId = 123456,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderRowId = 13,
                            OrderId = 123456,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderRowId = 14,
                            OrderId = 234567,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            OrderRowId = 15,
                            OrderId = 234567,
                            ProductId = 4,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Keps",
                            ImageLink = "/assets/pictures/Kepsar/Prop1.png",
                            ProductDescription = "Kepsarnas keps",
                            ProductName = "Propellerkeps Deluxe",
                            ProductPrice = 189m
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Keps",
                            ImageLink = "/assets/pictures/Kepsar/Prop10.png",
                            ProductDescription = "Keps med guldskärm",
                            ProductName = "Propellerkeps Premium",
                            ProductPrice = 179m
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Torktumlare",
                            ImageLink = "/assets/pictures/Torktumlare/Tork1.png",
                            ProductDescription = "Instegsmodell bland torktumlare",
                            ProductName = "Torktumlare X3",
                            ProductPrice = 4990m
                        },
                        new
                        {
                            ProductId = 4,
                            Category = "Torktumlare",
                            ImageLink = "/assets/pictures/Torktumlare/Tork10.png",
                            ProductDescription = "Premium Torktumlare med det lilla extra",
                            ProductName = "Torktumlare XT55",
                            ProductPrice = 7990m
                        },
                        new
                        {
                            ProductId = 5,
                            Category = "Keps",
                            ImageLink = "/assets/pictures/Kepsar/Prop11.png",
                            ProductDescription = "Propellerkepsen för den som testar gränser",
                            ProductName = "Propellerkeps Crazy",
                            ProductPrice = 149m
                        });
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Himlastråket 666",
                            City = "Himmelriket",
                            Email = "send_me_your_prayers@abdi.com",
                            FirstName = "Abdi",
                            LastName = "Benådsson",
                            Phone = "0704563212",
                            ZipCode = "12345"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "Sillstigen 12",
                            City = "Karlstad",
                            Email = "lind.cecilia@coldmail.com",
                            FirstName = "Cecilia",
                            LastName = "Lind",
                            Phone = "0736545285",
                            ZipCode = "65225"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Gnejsvägen 45",
                            City = "Hammarstrand",
                            Email = "darko.petrovic@gomail.com",
                            FirstName = "Darko",
                            LastName = "Petrovic",
                            Phone = "0726547894",
                            ZipCode = "84070"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Nobelvägen 62",
                            City = "Malmö",
                            Email = "marljung@yahoo.it",
                            FirstName = "Märta",
                            LastName = "Ljunquist",
                            Phone = "040979797",
                            ZipCode = "21215"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Smultronstråket 11",
                            City = "Farsta",
                            Email = "robbyfire@msm.com",
                            FirstName = "Robert",
                            LastName = "Fayer",
                            Phone = "0762316497",
                            ZipCode = "12323"
                        },
                        new
                        {
                            UserId = 6,
                            Address = "Forskningsvägen 2",
                            City = "Umeå",
                            Email = "janinamuller@ichbin.de",
                            FirstName = "Janina",
                            LastName = "Müller",
                            Phone = "0702026978",
                            ZipCode = "90638"
                        },
                        new
                        {
                            UserId = 7,
                            Address = "Gesslegatan 70",
                            City = "Halmstad",
                            Email = "pedro_velasquez@hotmail.se",
                            FirstName = "Pedro",
                            LastName = "Velasquez",
                            Phone = "0736974121",
                            ZipCode = "30261"
                        },
                        new
                        {
                            UserId = 8,
                            Address = "Polartorget 2",
                            City = "Åtvidaberg",
                            Email = "amiina_asghar_84@yahoo.se",
                            FirstName = "Amina",
                            LastName = "Asghar",
                            Phone = "0704563289",
                            ZipCode = "59791"
                        },
                        new
                        {
                            UserId = 9,
                            Address = "Marsipanvägen 45",
                            City = "Växjö",
                            Email = "unouno@saltsill.com",
                            FirstName = "Uno",
                            LastName = "Svenningsson",
                            Phone = "0729875214",
                            ZipCode = "35258"
                        },
                        new
                        {
                            UserId = 10,
                            Address = "Trälgatan 102",
                            City = "Örebro",
                            Email = "juha_1337@suomisoundi.fi",
                            FirstName = "Juha",
                            LastName = "Määki",
                            Phone = "0768521498",
                            ZipCode = "70510"
                        },
                        new
                        {
                            UserId = 11,
                            Address = "Rödmålavägen 7",
                            City = "Lund",
                            Email = "anderspersson52@irra.se",
                            FirstName = "Anders",
                            LastName = "Persson",
                            Phone = "0701238545",
                            ZipCode = "22242"
                        });
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.Order", b =>
                {
                    b.HasOne("SnurrtumlareWebSite.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.OrderRow", b =>
                {
                    b.HasOne("SnurrtumlareWebSite.Models.Order", null)
                        .WithMany("OrderRows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnurrtumlareWebSite.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.Order", b =>
                {
                    b.Navigation("OrderRows");
                });

            modelBuilder.Entity("SnurrtumlareWebSite.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
