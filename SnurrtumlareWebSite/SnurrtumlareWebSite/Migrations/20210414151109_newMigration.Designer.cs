// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnurrtumlareWebSite.Data;

namespace SnurrtumlareWebSite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210414151109_newMigration")]
    partial class newMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "09d9e200-1c12-4580-90bc-5a084187cbbf",
                            ConcurrencyStamp = "ce8d2618-a72c-4883-98ad-75fb20e06ac2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab21345d-f0d6-483a-bbee-6219d4bf9b36",
                            ConcurrencyStamp = "4b0f5479-9a47-458e-8178-97473ef79826",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d868bfd3-3848-4876-91d3-4e6231c7b540",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6582cc27-5198-4b7a-b5d0-61354377c5f0",
                            Email = "send_me_your_prayers@abdi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SEND_ME_YOUR_PRAYERS@ABDI.COM",
                            NormalizedUserName = "SEND_ME_YOUR_PRAYERS@ABDI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC94UtArUQjvtTzZCMATAg3Gvyw9/qYMdeFG9IBXrTsPyIEKIT1fh/ZLokUAtDxwFg==",
                            PhoneNumber = "0704563212",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "414e6642-dd63-481a-907f-dc75331228e6",
                            TwoFactorEnabled = false,
                            UserName = "send_me_your_prayers@abdi.com"
                        },
                        new
                        {
                            Id = "02c0ac9c-c9de-4fb9-8fc7-6a01438c6e4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0aea341b-b176-4e13-96b0-35d72ff7040b",
                            Email = "lind.cecilia@coldmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIND.CECILIA@COLDMAIL.COM",
                            NormalizedUserName = "LIND.CECILIA@COLDMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+7UVhG96s2bAS07XscHeOARn6yEbBU7j4PnAtGO5L1sMzVDzi6gR+BL2LFs4UIDQ==",
                            PhoneNumber = "0736545285",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c22a2b9f-566e-4ea2-b807-8af5bb6f904d",
                            TwoFactorEnabled = false,
                            UserName = "lind.cecilia@coldmail.com"
                        },
                        new
                        {
                            Id = "86da85e2-cb80-4813-b7cb-9e0549e24fa5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba2397ae-cfab-47ed-a680-2abb87dbca9f",
                            Email = "darko.petrovic@gomail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DARKO.PETROVIC@GOMAIL.COM",
                            NormalizedUserName = "DARKO.PETROVIC@GOMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGheJi9Ilx3AtLv6xEKD2C/qqNRbbBD0eBhfALkCdbwWzLxAx/aYmB5Y22I4UIDJDA==",
                            PhoneNumber = "0726547894",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0a8353f6-66e2-4739-899e-7558cee81347",
                            TwoFactorEnabled = false,
                            UserName = "darko.petrovic@gomail.com"
                        },
                        new
                        {
                            Id = "ae8ae8a4-7374-4266-b0cb-bfec59994381",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "560d4256-d4a7-42b3-97f6-04c87895992b",
                            Email = "marljung@yahoo.it",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARLJUNG@YAHOO.IT",
                            NormalizedUserName = "MARLJUNG@YAHOO.IT",
                            PasswordHash = "AQAAAAEAACcQAAAAENzc6j/8lisikDf9AVujKXl2gJZVzF5YxkIWyvOwcZMdNAP/abaqeh5gpsqGk224UQ==",
                            PhoneNumber = "0726547894",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8b0644e8-3ad7-4cbc-a001-a2e8a332f224",
                            TwoFactorEnabled = false,
                            UserName = "marljung@yahoo.it"
                        },
                        new
                        {
                            Id = "f8814924-3cd7-4115-82bb-978fc3de301e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dc800d6-63ec-4549-b427-fc44fbe41ef7",
                            Email = "robbyfire@msm.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROBBYFIRE@MSN.COM",
                            NormalizedUserName = "ROBBYFIRE@MSN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbtAmclHBsZpweqgtwa89UmwBTWo+PHrKDmEITJY2W9fF3Yb0159+QoxB1JgUUJhQ==",
                            PhoneNumber = "0762316497",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d58922dc-ee85-4934-afde-d2f5e3ac3255",
                            TwoFactorEnabled = false,
                            UserName = "robbyfire@msm.com"
                        },
                        new
                        {
                            Id = "aa576395-28ef-418c-8d45-9f46011ca694",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0ba9f7b-72c3-46de-ab6d-cf8750a31f10",
                            Email = "janinamuller@ichbin.de",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANINAMULLER@ICHBIN.DE",
                            NormalizedUserName = "JANINAMULLER@ICHBIN.DE",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7GsVCdjCX5qQCC8dZcsB0+jj+GFrMZ390nF4S6CLuJsAirWBXwVoXkPxo8GzfuiQ==",
                            PhoneNumber = "0726547894",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "157c86ce-6f90-4430-b2ba-201c3103b8bc",
                            TwoFactorEnabled = false,
                            UserName = "janinamuller@ichbin.de"
                        },
                        new
                        {
                            Id = "8b1edaa6-a5c8-49a5-8928-2194f5a488a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec2bb96e-e9bb-407a-88cf-bd6c74b46750",
                            Email = "pedro_velasquez@hotmail.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEDRO_VELASQUEZ@HOTMAIL.SE",
                            NormalizedUserName = "PEDRO_VELASQUEZ@HOTMAIL.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDRzKOuJJsBWcYiZKptcO+coYQVeLxsZ4DymKHHWcDQ49d5FZxsxtZgKZbMT6ZcPzQ==",
                            PhoneNumber = "0736974121",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4b4ef217-df5e-4b47-b13d-e151ec9cde8d",
                            TwoFactorEnabled = false,
                            UserName = "pedro_velasquez@hotmail.se"
                        },
                        new
                        {
                            Id = "dc7a6cd6-1058-4a04-8223-e14237063382",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4eb1e8a-5df3-4312-92d9-e65f27238be7",
                            Email = "amiina_asghar_84@yahoo.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMIINA_ASGHAR_84@YAHOO.SE",
                            NormalizedUserName = "AMIINA_ASGHAR_84@YAHOO.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFv5L0IvMX3j4wH8kCFHqCYE5e3Iii6+XS9Rvck7MfzDcDVErxqThpjSLP7h0WC0tQ==",
                            PhoneNumber = "0704563289",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "253afd52-f97e-482a-a27f-126b84f43d13",
                            TwoFactorEnabled = false,
                            UserName = "amiina_asghar_84@yahoo.se"
                        },
                        new
                        {
                            Id = "ba21cf47-9005-4584-9716-fe4199f4dca0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "695f3266-3ce4-4da7-9b3a-1ada42df8662",
                            Email = "unouno@saltsill.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UNOUNO@SALTSILL.COM",
                            NormalizedUserName = "UNOUNO@SALTSILL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7eLXrRN/OJVkKyK7OkbE627PNRSZ6ioNSBRPs0p8W4ckzk8AtU/blX5czZN525JQ==",
                            PhoneNumber = "0704563289",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b0459779-bee2-4706-a236-cd85f33ca907",
                            TwoFactorEnabled = false,
                            UserName = "unouno@saltsill.com"
                        },
                        new
                        {
                            Id = "6a904d99-0e82-4978-ae18-88baf5a69a84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d86b644-684b-47ac-b2b6-ff142eb211df",
                            Email = "juha_1337@suomisoundi.fi",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUHA_1337@SUOMISOUNDI.FI",
                            NormalizedUserName = "JUHA_1337@SUOMISOUNDI.FI",
                            PasswordHash = "AQAAAAEAACcQAAAAEHK+TTJNqtL70OJJWugxfP2Nbzbg1Q47xstgPPPmdcUGZK0Qf5N24IiZXWDgErkQVw==",
                            PhoneNumber = "0768521498",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "abc1c7f6-e1cf-46e7-9f18-db341b7b0233",
                            TwoFactorEnabled = false,
                            UserName = "juha_1337@suomisoundi.fi"
                        },
                        new
                        {
                            Id = "dbb4261d-cddd-47a3-8cc7-021fdba2c4e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0f2b79e-af27-421f-ad86-b8d49c50333e",
                            Email = "anderspersson52@irra.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDERSPERSSON52@IRRA.SE",
                            NormalizedUserName = "ANDERSPERSSON52@IRRA.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAECPjfa/jxZGY94DiO2UuFOhs05GHahtnm5WUiE4d2L5N9PNPNVmLpyRSc8Rdw7Ubbw==",
                            PhoneNumber = "0768521498",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2d459c2e-1219-4a36-b4ec-d03687301ca1",
                            TwoFactorEnabled = false,
                            UserName = "anderspersson52@irra.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d868bfd3-3848-4876-91d3-4e6231c7b540",
                            RoleId = "09d9e200-1c12-4580-90bc-5a084187cbbf"
                        },
                        new
                        {
                            UserId = "02c0ac9c-c9de-4fb9-8fc7-6a01438c6e4c",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "86da85e2-cb80-4813-b7cb-9e0549e24fa5",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "ae8ae8a4-7374-4266-b0cb-bfec59994381",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "f8814924-3cd7-4115-82bb-978fc3de301e",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "aa576395-28ef-418c-8d45-9f46011ca694",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "8b1edaa6-a5c8-49a5-8928-2194f5a488a3",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "dc7a6cd6-1058-4a04-8223-e14237063382",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "ba21cf47-9005-4584-9716-fe4199f4dca0",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "6a904d99-0e82-4978-ae18-88baf5a69a84",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        },
                        new
                        {
                            UserId = "dbb4261d-cddd-47a3-8cc7-021fdba2c4e6",
                            RoleId = "ab21345d-f0d6-483a-bbee-6219d4bf9b36"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
